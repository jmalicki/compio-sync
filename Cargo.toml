[package]
name = "compio-sync"
version = "0.0.1"
edition = "2021"
authors = ["Joseph Malicki <jmalicki@gmail.com>"]
description = "Async synchronization primitives for compio runtime"
license = "MIT"
repository = "https://github.com/jmalicki/compio-sync"
keywords = ["async", "synchronization", "semaphore", "compio", "concurrency"]
categories = ["asynchronous", "concurrency"]
readme = "README.md"

[dependencies]
# Compio runtime for async operations
compio = { version = "0.16", features = ["macros"] }

# Faster mutex for generic implementation
parking_lot = "0.12"

# Lock-free single-waiter optimization
atomic-waker = "1.1"

# Type-safe enum conversions for atomic mode
num_enum = "0.7"

# Linux-specific: io_uring for futex operations
[target.'cfg(target_os = "linux")'.dependencies]
io-uring = "0.7"
compio-driver = "0.9"
libc = "0.2"  # For direct futex syscalls when not in runtime

# Windows-specific: IOCP integration with event objects
[target.'cfg(windows)'.dependencies]
windows-sys = { version = "0.52", features = [
    "Win32_System_Threading",
    "Win32_Foundation",
    "Win32_System_IO",
] }
compio-driver = "0.9"

[dev-dependencies]
compio = { version = "0.16", features = ["macros", "time"] }
criterion = { version = "0.5", features = ["async_tokio"] }

[[bench]]
name = "semaphore_bench"
harness = false

[lib]
name = "compio_sync"
path = "src/lib.rs"

