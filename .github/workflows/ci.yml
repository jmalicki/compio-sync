name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  # Phase 1: Fast checks that run in parallel (non-blocking)
  code-quality:
    name: Code Quality (Lint & Format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      # Check formatting first (fastest check)
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      # Run clippy (uses sccache for compilation)
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

  # Phase 1 (parallel): Documentation - runs early but doesn't block pipeline
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: stable
      
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

  # Phase 2: Build on different platforms/toolchains
  build:
    name: Build (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable, nightly]
        # Future: add windows-latest, macos-latest when platform-specific code is ready
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Build library
        run: cargo build --verbose --all-features
      
      - name: Build tests
        run: cargo build --tests --verbose --all-features
      
      - name: Build benches
        run: cargo build --benches --verbose --all-features
        if: matrix.rust == 'stable'
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

  # Phase 3: Run tests (uses cached builds from previous phase)
  test:
    name: Test (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Run tests
        run: cargo test --verbose --all-features
      
      - name: Run doc tests
        run: cargo test --doc --all-features
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

