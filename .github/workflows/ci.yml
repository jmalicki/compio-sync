name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  # Phase 1: Fast checks that run in parallel (non-blocking)
  code-quality:
    name: Code Quality (Lint & Format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      # Install cross-compilation targets for checking all platform-specific code
      - name: Install cross-compilation targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-pc-windows-msvc
          rustup target add x86_64-apple-darwin
      
      # Check formatting first (fastest check)
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      # Run clippy for all platforms to check all cfg() branches
      - name: Run clippy (Linux)
        run: cargo clippy --target x86_64-unknown-linux-gnu --all-targets --all-features -- -D warnings
      
      - name: Run clippy (Windows)
        run: cargo clippy --target x86_64-pc-windows-msvc --all-targets --all-features -- -D warnings
      
      - name: Run clippy (macOS)
        run: cargo clippy --target x86_64-apple-darwin --all-targets --all-features -- -D warnings
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

  # Phase 1 (parallel): Documentation - runs early but doesn't block pipeline
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: stable
      
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

  # Phase 2: Build on different platforms/toolchains
  build:
    name: Build (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-24.04  # Kernel 6.11 - tests io_uring futex path (requires 6.7+)
          - ubuntu-22.04  # Kernel 5.15 - tests generic fallback path
          - windows-2022  # Windows - tests IOCP event integration
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: ${{ matrix.rust }}
      
      # Workaround for sccache/cache corruption on ubuntu-22.04 stable
      - name: Clean and disable sccache for ubuntu-22.04 stable
        if: matrix.os == 'ubuntu-22.04' && matrix.rust == 'stable'
        run: |
          cargo clean
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
      
      - name: Build library
        run: cargo build --verbose --all-features
      
      - name: Build tests
        run: cargo build --tests --verbose --all-features
      
      - name: Build benches
        run: cargo build --benches --verbose --all-features
        if: matrix.rust == 'stable'
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

  # Phase 3: Run tests (uses cached builds from previous phase)
  test:
    name: Test (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04  # Kernel 6.11 - tests io_uring futex path (requires 6.7+)
          - ubuntu-22.04  # Kernel 5.15 - tests generic fallback path
          - windows-2022  # Windows - tests IOCP event integration
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with sccache
        uses: ./.github/actions/setup-rust-sccache
        with:
          toolchain: ${{ matrix.rust }}
      
      # Workaround for sccache/cache corruption on ubuntu-22.04 stable
      - name: Clean and disable sccache for ubuntu-22.04 stable
        if: matrix.os == 'ubuntu-22.04' && matrix.rust == 'stable'
        run: |
          cargo clean
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
      
      - name: Check system version
        run: |
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            echo "Windows version:"
            ver
            echo "Testing IOCP event integration"
          else
            echo "Kernel version:"
            uname -r
            echo "Expected: 6.7+ for io_uring futex support"
          fi
      
      - name: Run tests
        run: cargo test --verbose --all-features
      
      - name: Run doc tests
        run: cargo test --doc --all-features
      
      - name: Show sccache statistics
        run: sccache --show-stats
        if: always()

